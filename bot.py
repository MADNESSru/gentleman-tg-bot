app = None
TOKEN = BOT_TOKEN
WEATHER_TOKEN = WEATHER_API_KEY
GET_CITY = 1
GET_TARGET_LANG, GET_TEXT = range(2)

executor = ThreadPoolExecutor()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        """
        –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —É–≤–∞–∂–∞–µ–º—ã–π(–∞—è)! üé©‚ú®
–ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è ‚Äî –≤–∞—à —É—á—Ç–∏–≤–µ–π—à–∏–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∏—Å—Ç–∏–Ω–Ω–æ –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–∞ –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã—Ö –º–∞–Ω–µ—Ä. –ö –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º ‚Äî –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã, —Ç–æ–Ω–∫–∏–π —é–º–æ—Ä –∏, —Ä–∞–∑—É–º–µ–µ—Ç—Å—è, –±–µ–∑—É–∫–æ—Ä–∏–∑–Ω–µ–Ω–Ω–∞—è –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å \n
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –≤–∞–º —Å–µ–≥–æ–¥–Ω—è, –Ω–∞–ø–∏—à–∏—Ç–µ /help
        """
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/meme - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )

# /weather ‚Äî –Ω–∞—á–∞–ª–æ
async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
    return GET_CITY

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É
async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_TOKEN}&units=metric&lang=ru"
    response = requests.get(url).json()

    if response.get("cod") != 200:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return GET_CITY

    temp = response["main"]["temp"]
    desc = response["weather"][0]["description"]
    await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n{temp}¬∞C, {desc}")
    return ConversationHandler.END

async def generate_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–æ–∑–¥–∞—ë–º –º–µ–º...")

    MEME_TEMPLATES = [
    {"id": "112126428", "name": "Distracted Boyfriend"},
    {"id": "61579", "name": "One Does Not Simply"},
    {"id": "181913649", "name": "Drake Hotline Bling"},
    {"id": "102156234", "name": "Mocking Spongebob"},
    {"id": "87743020", "name": "Two Buttons"},
    {"id": "89370399", "name": "Roll Safe Think About It"},]

    MEME_TEXTS = [
    ("–ö–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª —É—á–∏—Ç—å Python", "–∏ —É–∂–µ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å"),
    ("–ö–æ–≥–¥–∞ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç–∞—Ç—å—é –Ω–∞ –•–∞–±—Ä–µ", "–∏ —Ç–µ–ø–µ—Ä—å —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò"),
    ("–ö–æ–≥–¥–∞ –±–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞", "–∏ —Ç—ã –Ω–µ –≤–µ—Ä–∏—à—å —Å–≤–æ–∏–º –≥–ª–∞–∑–∞–º"),
    ("–ö–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—à—å –∫–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫", "–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –≥–µ–Ω–∏–µ–º"),
    ("–ö–æ–≥–¥–∞ ChatGPT –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø—Ä–æ–µ–∫—Ç–æ–º", "–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ"),]

    template = random.choice(MEME_TEMPLATES)
    top_text, bottom_text = random.choice(MEME_TEXTS)

    url = "https://api.imgflip.com/caption_image"
    params = {
        "template_id": template["id"],
        "username": IMGFLIP_USERNAME,
        "password": IMGFLIP_PASSWORD,
        "text0": top_text,
        "text1": bottom_text
    }

    response = requests.post(url, params=params)
    data = response.json()

    if data["success"]:
        meme_url = data["data"]["url"]
        await update.message.reply_photo(photo=meme_url)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
def generate_response_from_llm(prompt: str) -> str:
    full_prompt = f"{STYLE_PROMPT}\n<|im_start|>user\n{prompt}<|im_end|>\n<|im_start|>assistant\n"

    payload = {
        "inputs": full_prompt,
        "parameters": {
            "temperature": 0.7,
            "top_k": 40,
            "max_new_tokens": 100,
            "return_full_text": False
        },
        "options": {
            "wait_for_model": True  # –≤–∞–∂–Ω–æ, –∏–Ω–∞—á–µ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è 503
        }
    }

    response = requests.post(HF_API_URL, headers=headers, json=payload)

    if response.status_code == 200:
        result = response.json()
        return result[0]["generated_text"].strip().split("<|im_end|>")[0]
    else:
        print("–û—à–∏–±–∫–∞ Hugging Face API:", response.status_code, response.text)
        return "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è —É–≤–∞–∂–∞–µ–º—ã–π(–∞—è), –Ω–æ —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Hugging Face."


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def generate_response_async(prompt: str) -> str:
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(executor, generate_response_from_llm, prompt)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —à–ª—ë—Ç "typing", –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    async def send_typing():
        while not typing_task.done():
            await update.message.chat.send_action("typing")
            await asyncio.sleep(1.5)

    typing_task = asyncio.create_task(generate_response_async(user_input))
    typing_indicator = asyncio.create_task(send_typing())

    try:
        reply = await typing_task
        await update.message.reply_text(reply)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ handle_text:", e)
        await update.message.reply_text(
            "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π. –í–∏–¥–∏–º–æ, —á—ë—Ä–Ω–∏–ª–∞ –≤ –º–æ—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –ø–µ—Ä–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."
        )
    finally:
        typing_indicator.cancel()

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END
